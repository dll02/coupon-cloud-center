server:
  port: 20002
#  servlet:
#    context-path: /coupon-user

spring:
  application:
    name: coupon-user-service
  rabbitmq:
    host: 124.220.32.86
    port: 5672
    username: guest
    password: guest
  kafka:
    bootstrap-servers: 124.220.32.86:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 3
      acks: 1
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate.format_sql: true
      hibernate.show_sql: true
      hibernate.dialect: org.hibernate.dialect.MySQLDialect
    open-in-view: false

  datasource:
    # 数据源
    url: jdbc:mysql://124.220.32.86:3306/broadview_coupon_db?autoReconnect=true&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=CONVERT_TO_NULL&serverTimezone=UTC
    username: root
    password: 123456
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 连接池
    hikari:
      connection-timeout: 20000
      idle-timeout: 20000
      maximum-pool-size: 20
      minimum-idle: 5
      max-lifetime: 30000
      auto-commit: true
      pool-name: BroadviewCouponHikari
  redis:
    host: 124.220.32.86
    port: 6379
    # 连接超时时间
    timeout: 10000
#  redis:
#    database: 0
#    host: 127.0.0.1
#    port: 6379
#    # password:
#    # 连接超时时间
#    timeout: 10000
#  kafka:
#    bootstrap-servers:
#      - localhost:9092
#    consumer:
#      group-id: broadview-test
#      auto-offset-reset: latest
broadview.rabbitmq.exchange: broadview.direct
broadview.rabbitmq.routingkey: broadview.routingkey

broadview:
  templateserivce:
    url:
      batch: "http://localhost:20000/template/getBatch"
      single: "http://localhost:20000/template/get"

#broadview:
#  calculatserivce:
#    url: "/calculator/checkout"

eureka:
  client:
    service-url:
      defaultZone: http://peer1:10000/eureka/,http://peer2:10001/eureka/

# ribbon被兼容在Feign
#ribbon:
#  ConnectTimeout: 1000 #服务请求连接超时时间（毫秒）
#  ReadTimeout: 5000 #服务请求处理超时时间（毫秒）
#  OkToRetryOnAllOperations: true #对超时请求启用重试机制
#  MaxAutoRetriesNextServer: 1 #切换重试实例的最大个数
#  MaxAutoRetries: 1 # 切换实例后重试最大次数
#
##发送到coupon-template-service服务的负载均衡配置
#coupon-template-service:
#  ribbon:
#    # 指定负载均衡策略为随机访问策略
#    # 一般采用默认的RoundRobin负载均衡策略
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
#    # 指定IPing策略（一般策略中不指定IPing），配合Feign使用
#    NFLoadBalancerPingClassName: com.netflix.niws.loadbalancer.NIWSDiscoveryPing

logging:
  level:
    com.broadview.coupon.user.external.TemplateClient: debug

# feign 配置
feign:
  hystrix: # feign内置熔断降级功能
    enabled: true   # Hystrix功能开启
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 1024 # 大于该size 数据会被压缩
    response:
      enabled: true
  client:
    config:
      default:  # 全局生效
        connectTimeout: 1000  # 默认的连接超时时间是 10s
        readTimeout: 5000
      coupon-template-service:  # 单独服务的配置
        connectTimeout: 1000  # 默认的连接超时时间是 10s
        readTimeout: 4000

# hystrix全局参数
hystrix:
  metrics:
    enabled: true
  command:
    # 此处添加HystrixCommand中配置的commandKey，在这里设置超时时间，局部参数
    #    requestCouponKey:
    #      execution:
    #        isolation:
    #          thread:
    #            #requestCoupon的超时时间
    #            timeoutInMilliseconds: 2000
    default:
    # 全局参数
      fallback:
        enabled: true # 开启降级（默认处于开启状态）
      circuitBreaker:
        enabled: true #开启/禁用熔断机制（默认开启）
        requestVolumeThreshold: 4 # 断路器请求阈值，至少调用次数
        sleepWindowInMilliseconds: 10000 # 断路器等待窗口 10s
        errorThresholdPercentage: 50 # 断路器错误百分比（触发条件）
        # 在一个统计窗口内，只有当请求书超过X，且错误比例达到50%，触发断路
      metrics:
        rollingStats:
          timeInMilliseconds: 20000 #滑动窗口持续时间
          numBuckets: 10 #滑动窗口中bucket数量
          rollingPercentile:
            # 指定方法响应时间的统计参数和百分位信息
            enabled: true #是否执行时间百分比信息
            timeInMilliseconds: 60000 #执行时间统计周期
            numBuckets: 6 #执行时间统计内的bucket数量
            bucketSize: 1000 #每个bucket最多统计的记录条数
          healthSnapshot:
            intervalInMilliseconds: 500 #健康快照信息采集间隔
      execution:
        timeout:
          #是否允许超时
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 3000 # 全局超时时间
            interruptOnTimeout: true # 超时后是否中断线程
            interruptOnCancel: true # 取消调用后是否中断线程
          semaphore:
            maxConcurrentRequests: 10 #最大并发请求数

# actuator集成Hystrix Dashboard
management:
  endpoint:
    health:
      # 总是显示各个组件的actuator信息
      show-details: always
  endpoints:
    web:
      exposure:
        # 暴露所有endpoint
        include: '*'
  security:
    enabled: false

# request-coupon-disabled:false